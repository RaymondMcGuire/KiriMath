// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_FLATDATA_KIRI_MATH_FBS_H_
#define FLATBUFFERS_GENERATED_FLATDATA_KIRI_MATH_FBS_H_

#include "flatbuffers/flatbuffers.h"

namespace kiri_math
{
  namespace fbs
  {

    struct FlatData;

    struct FlatData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table
    {
      enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE
      {
        VT_DATA = 4
      };
      const flatbuffers::Vector<uint8_t> *data() const
      {
        return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
      }
      bool Verify(flatbuffers::Verifier &verifier) const
      {
        return VerifyTableStart(verifier) &&
               VerifyOffset(verifier, VT_DATA) &&
               verifier.VerifyVector(data()) &&
               verifier.EndTable();
      }
    };

    struct FlatDataBuilder
    {
      flatbuffers::FlatBufferBuilder &fbb_;
      flatbuffers::uoffset_t start_;
      void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data)
      {
        fbb_.AddOffset(FlatData::VT_DATA, data);
      }
      explicit FlatDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
          : fbb_(_fbb)
      {
        start_ = fbb_.StartTable();
      }
      FlatDataBuilder &operator=(const FlatDataBuilder &);
      flatbuffers::Offset<FlatData> Finish()
      {
        const auto end = fbb_.EndTable(start_);
        auto o = flatbuffers::Offset<FlatData>(end);
        return o;
      }
    };

    inline flatbuffers::Offset<FlatData> CreateFlatData(
        flatbuffers::FlatBufferBuilder &_fbb,
        flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0)
    {
      FlatDataBuilder builder_(_fbb);
      builder_.add_data(data);
      return builder_.Finish();
    }

    inline flatbuffers::Offset<FlatData> CreateFlatDataDirect(
        flatbuffers::FlatBufferBuilder &_fbb,
        const std::vector<uint8_t> *data = nullptr)
    {
      auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
      return kiri_math::fbs::CreateFlatData(
          _fbb,
          data__);
    }

    inline const kiri_math::fbs::FlatData *GetFlatData(const void *buf)
    {
      return flatbuffers::GetRoot<kiri_math::fbs::FlatData>(buf);
    }

    inline const kiri_math::fbs::FlatData *GetSizePrefixedFlatData(const void *buf)
    {
      return flatbuffers::GetSizePrefixedRoot<kiri_math::fbs::FlatData>(buf);
    }

    inline bool VerifyFlatDataBuffer(
        flatbuffers::Verifier &verifier)
    {
      return verifier.VerifyBuffer<kiri_math::fbs::FlatData>(nullptr);
    }

    inline bool VerifySizePrefixedFlatDataBuffer(
        flatbuffers::Verifier &verifier)
    {
      return verifier.VerifySizePrefixedBuffer<kiri_math::fbs::FlatData>(nullptr);
    }

    inline void FinishFlatDataBuffer(
        flatbuffers::FlatBufferBuilder &fbb,
        flatbuffers::Offset<kiri_math::fbs::FlatData> root)
    {
      fbb.Finish(root);
    }

    inline void FinishSizePrefixedFlatDataBuffer(
        flatbuffers::FlatBufferBuilder &fbb,
        flatbuffers::Offset<kiri_math::fbs::FlatData> root)
    {
      fbb.FinishSizePrefixed(root);
    }

  } // namespace fbs
} // namespace kiri_math

#endif // FLATBUFFERS_GENERATED_FLATDATA_KIRI_MATH_FBS_H_
